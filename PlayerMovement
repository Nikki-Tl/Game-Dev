using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;

// -------------------------------------------------------------------------------------------------------------------------

public class MoveSprite : MonoBehaviour
{
    // base a and d movement
    public float playerSpeed;

    // jumping and floor check
    public float playerJump;
    private bool grounded;
    // double jumping
    private bool doubleJumpCooldown;
    private int doubleJump = 0;

    // wall jumping
    private bool wallJumpCooldown;
    private bool canWallJump;
    private int wallJumpNegMove;


    // set rigidBody
    [SerializeField] Rigidbody2D myRigid;

    private Animator animate;

    // ---------------------------------------------------------------------------------------------------------------------

    void Start()
    {
        // set rigidBody
        myRigid = this.GetComponent<Rigidbody2D>();

        animate = this.GetComponent<Animator>();
    }

    // ---------------------------------------------------------------------------------------------------------------------

    void Update()
    {

        // set moveX for direction on x axis
        float moveX = Input.GetAxis("Horizontal");

        // PLAYER MOVEMENT ROTATION
        // ref: https://docs.unity3d.com/Manual/class-Quaternion.html
        //      https://docs.unity3d.com/ScriptReference/Quaternion.Euler.html
        //      https://docs.unity3d.com/ScriptReference/Vector3.Slerp.html
        //      https://www.youtube.com/watch?v=hd1QzLf4ZH8
        // grabs the rotation from direction player is going and applying a tilt (hence number after)
        float zRotation = Input.GetAxis("Horizontal") * 10;
        // from my understanding: quaternion is unitys way of rotating an obeject in 3D.
        //                        a euler is like a Vector3 for rotation? (kind of struggling so will ask in class).
        //                        slerp allows you to go from one vector position to another in a set amount of time (i understand this as smoothing between frames like in animation).
        Quaternion player = Quaternion.Euler(0, 0, zRotation);
        transform.rotation = Quaternion.Slerp(transform.rotation, player, Time.deltaTime * 50);

        // set animation direction
        animate.SetFloat("speed", Mathf.Abs(moveX));

        // finding out the mouse position 
        Vector3 mousePosition = Input.mousePosition;
        // taking that mouse positions x and adjusting it so the camera is centered (had to adjust for ~800 too, i think this is due to where i placed my scene)
        mousePosition.x = mousePosition.x - Camera.main.transform.position.x + 3.74f - 775f;

        //// flipping player sprite dending on direction 
        if (mousePosition.x > myRigid.position.x)
        {
            gameObject.transform.localScale = new Vector3(1, 1, 1);
        }
        if (mousePosition.x < myRigid.position.x)
        {
            gameObject.transform.localScale = new Vector3(-1, 1, 1);
        }

        // lock A & D movement when wall jumping
        if (!wallJumpCooldown)
        {
            // A & D Horizontal movement with "moveX"
            if (Input.GetKey("d"))
            {
                myRigid.velocity = new Vector2(moveX * playerSpeed, myRigid.velocity.y);
                
            }
            if (Input.GetKey("a"))
            {
                myRigid.velocity = new Vector2(moveX * playerSpeed, myRigid.velocity.y);
            }
        }

        // jumping if character is grounded
        if (Input.GetKey("w") && grounded)
        {
            myRigid.velocity = new Vector2(myRigid.velocity.x, playerJump);
            doubleJump = 1;
            // starts cooldown for double jump
            StartCoroutine(doubleJumpEnum());
            // set animation
            animate.SetBool("jumping", true);
        }
        // double jumping
        if (Input.GetKey("w") && !grounded && (doubleJump < 2) && !doubleJumpCooldown && !wallJumpCooldown)
        {
            myRigid.velocity = new Vector2(myRigid.velocity.x, playerJump);
            doubleJump = doubleJump + 1;
            UnityEngine.Debug.Log(doubleJump);
            // set animation
            animate.SetBool("jumping", true);

        }

        // Bug Fix: 
        // due to moveX having the ability of being 0, it would cause the negative/backwards movement...
        // ...to be 0 which would cause the player to just go up infinatly, this makes sure moveX cannot display 0 
        if (moveX < 0 && !canWallJump && !wallJumpCooldown)
        {
            wallJumpNegMove = -1;
        }
        if (moveX > 0 && !canWallJump && !wallJumpCooldown)
        {
            wallJumpNegMove = 1;
        }


        // wall jumping
        if (Input.GetKey("w") && Input.GetKey("a") && wallJumpNegMove == -1 && !grounded && canWallJump && !wallJumpCooldown)
        {
            myRigid.velocity = new Vector2(-wallJumpNegMove * playerSpeed, playerJump);
            wallJumpNegMove = -wallJumpNegMove;
            doubleJump = 1;
            StartCoroutine(wallJumpEnum());
            StartCoroutine(doubleJumpEnum());
            UnityEngine.Debug.Log(wallJumpNegMove);
            // set animation
            animate.SetBool("jumping", true);

        }
        if (Input.GetKey("w") && Input.GetKey("d") && wallJumpNegMove == 1 && !grounded && canWallJump && !wallJumpCooldown)
        {
            myRigid.velocity = new Vector2(-wallJumpNegMove * playerSpeed, playerJump);
            wallJumpNegMove = -wallJumpNegMove;
            doubleJump = 1;
            StartCoroutine(wallJumpEnum());
            StartCoroutine(doubleJumpEnum());
            UnityEngine.Debug.Log(wallJumpNegMove);
            // set animation
            animate.SetBool("jumping", true);

        }
        // slide down wall
        else if (!grounded && canWallJump && !wallJumpCooldown)
        {
            myRigid.velocity = new Vector2(myRigid.velocity.x / 5, -2);
        }

    }


    // collision checks
    void OnCollisionEnter2D(Collision2D collision)
    {

        if (collision.gameObject.CompareTag("Floor") && collision.gameObject.CompareTag("Wall"))
        {
            canWallJump = false;
        }

        // checking if character is grounded on floor
        if (collision.gameObject.CompareTag("Floor"))
        {
            grounded = true;
            doubleJump = 0;
            // set animation
            animate.SetBool("jumping", false);
        }

        // checking for wall
        if (collision.gameObject.CompareTag("Wall"))
        {
            canWallJump = true;
            // set animation
            animate.SetBool("jumping", false);
        }

    }
    private void OnCollisionExit2D(Collision2D collision)
    {
        // checking if character leaves floor 
        if (collision.gameObject.CompareTag("Floor"))
        {
            grounded = false;
        }
        // checking if character leaves wall
        if (collision.gameObject.CompareTag("Wall"))
        {
            canWallJump = false;
        }
    }

    // double jump cooldown timer
    IEnumerator doubleJumpEnum()
    {
        doubleJumpCooldown = true;
        yield return new WaitForSeconds(0.31f);
        doubleJumpCooldown = false;
    }

    // wall jump cooldown timer
    IEnumerator wallJumpEnum()
    {
        wallJumpCooldown = true;
        yield return new WaitForSeconds(0.3f);
        wallJumpCooldown = false;
    }

}
