using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;



public class MoveSprite : MonoBehaviour 
{
    // base a and d movement
    public float playerSpeed;

    // jumping and floor check
    public float playerJump;
    private bool grounded;
    // double jumping
    private bool doubleJumpCooldown;
    private int doubleJump = 0;


    // set rigidBody
    [SerializeField] Rigidbody2D myRigid;

    void Start()
    {
        // set rigidBody
        myRigid = this.GetComponent<Rigidbody2D>();
    }


    void Update() 
    {
        // A & D Horizontal movement with "moveX"
        float moveX = Input.GetAxis("Horizontal");
        if (Input.GetKey("d"))
        {
            myRigid.velocity = new Vector2(moveX * playerSpeed, myRigid.velocity.y);
        }
        if (Input.GetKey("a"))
        {
            myRigid.velocity = new Vector2(moveX * playerSpeed, myRigid.velocity.y);
        }

        // jumping if character is grounded
        if (Input.GetKey("w") && grounded)
        {
            myRigid.velocity = new Vector2(myRigid.velocity.x, playerJump);
            doubleJump = 1;
            // starts cooldown for double jump
            StartCoroutine(doubleJumpEnum());
        }
        // double jumping
        if (Input.GetKey("w") && !grounded && (doubleJump < 2) && !doubleJumpCooldown)
        {
            myRigid.velocity = new Vector2(myRigid.velocity.x, playerJump);
            doubleJump = doubleJump + 1;

        }


    }

    
    // collision checks
    void OnCollisionEnter2D(Collision2D collision)
    {
        // checking if character is grounded on floor
        if (collision.gameObject.CompareTag("Floor"))
        {
            grounded = true;
            doubleJump = 0;
        }
       
    }
    private void OnCollisionExit2D(Collision2D collision)
    {
        // checking if character leaves floor 
        if (collision.gameObject.CompareTag("Floor"))
        {
            grounded = false;
            
        }
    }

    // double jump cooldown timer
    IEnumerator doubleJumpEnum()
    {
        doubleJumpCooldown = true;
        yield return new WaitForSeconds(0.3f);
        doubleJumpCooldown = false;
    }
}